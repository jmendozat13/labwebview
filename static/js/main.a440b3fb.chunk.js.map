{"version":3,"sources":["components/TarjetaFruta.js","components/Producto.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["TarjetaFruta","state","cantidad","forEach","method","bind","this","setState","hasItems","styles","border","marginBottom","borderRadius","padding","background","color","transition","style","props","name","ButtonGroup","size","aria-label","Button","onClick","agregar","quitar","price","React","Component","Producto","Home","message","handleGoHomeEvent","window","Android","goHomeEvent","handleCloseEvent","closePopupEvent","className","variant","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kSAEqBA,E,kDACnB,aAAe,IAAD,uBACZ,gBAGKC,MAAQ,CACXC,SAAU,GALA,MAQI,CAAC,UAAW,UACpBC,SAAQ,SAACC,GACf,EAAKA,GAAU,EAAKA,GAAQC,KAAb,mBAVL,E,sDAeZC,KAAKC,SAAS,CACZL,SAAUI,KAAKL,MAAMC,SAAW,M,+BAKlCI,KAAKC,SAAS,CACZL,SAAUI,KAAKL,MAAMC,SAAW,M,+BAKlC,IAAMM,EAAWF,KAAKL,MAAMC,SAAW,EACjCO,EAAS,CACbC,OAAQ,kBACRC,aAAc,MACdC,aAAc,QACdC,QAAS,MACTC,WAAYN,EACR,mDACA,OACJO,MAAOP,EAAW,OAAS,OAC3BQ,WAAY,sBAGd,OACE,yBAAKC,MAAOR,GACV,4BAAKH,KAAKY,MAAMC,MAChB,2CAAiBb,KAAKL,MAAMC,SAA5B,KACA,kBAACkB,EAAA,EAAD,CAAaC,KAAK,QAAQC,aAAW,+BACnC,kBAACC,EAAA,EAAD,CAAQC,QAASlB,KAAKmB,SAAtB,KACA,kBAACF,EAAA,EAAD,CAAQC,QAASlB,KAAKoB,QAAtB,MAGF,6BACA,iCAAOpB,KAAKY,MAAMS,Y,GAnDgBC,IAAMC,WCA3BC,E,4MAGnB7B,MAAQ,CACNC,SAAU,G,EAGZuB,QAAU,kBAAM,EAAKlB,SAAS,CAAEL,SAAU,EAAKD,MAAMC,SAAW,K,EAChEwB,OAAS,kBAAM,EAAKnB,SAAS,CAAEL,SAAU,EAAKD,MAAMC,SAAW,K,uDAG7D,OACE,6BACE,wCACA,4BAAKI,KAAKY,MAAMC,MAChB,0CAAgBb,KAAKL,MAAMC,SAA3B,KACA,kBAACkB,EAAA,EAAD,CAAaC,KAAK,QAAQC,aAAW,+BACnC,kBAACC,EAAA,EAAD,CAAQC,QAASlB,KAAKmB,SAAtB,KACA,kBAACF,EAAA,EAAD,CAAQC,QAASlB,KAAKoB,QAAtB,MAEF,6BACA,iCAAOpB,KAAKY,MAAMS,Y,GArBYC,IAAMC,WCGvBE,E,4MACnB9B,MAAQ,CACN+B,QAAS,I,EAGXC,kBAAoB,WACdC,OAAOC,SAASD,OAAOC,QAAQC,YAAY,0BAC/C,EAAK7B,SAAS,CAAEyB,QAAS,gC,EAG3BK,iBAAmB,WACbH,OAAOC,SAASD,OAAOC,QAAQG,kBACnC,EAAK/B,SAAS,CAAEyB,QAAS,qB,uDAIzB,OACE,yBAAKO,UAAU,OACb,kBAAChB,EAAA,EAAD,CAAQiB,QAAQ,WAAWhB,QAASlB,KAAK2B,mBAAzC,WAGA,2BAAI3B,KAAKL,MAAM+B,SACf,kBAAC,EAAD,CAAcb,KAAK,UAAUQ,MAAO,MACpC,kBAAC,EAAD,CAAUR,KAAK,OAAOQ,MAAO,OAC7B,kBAACJ,EAAA,EAAD,CAAQiB,QAAQ,WAAWhB,QAASlB,KAAK2B,mBAAzC,U,GAxB0BL,IAAMC,W,MCOzBY,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCKcG,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1B,c","file":"static/js/main.a440b3fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, ButtonGroup } from \"@material-ui/core\";\r\nexport default class TarjetaFruta extends React.Component {\r\n  constructor() {\r\n    super();\r\n    //this.agregar = this.agregar.bind(this);\r\n    //this.quitar = this.quitar.bind(this);\r\n    this.state = {\r\n      cantidad: 0,\r\n    };\r\n\r\n    const METHODS = [\"agregar\", \"quitar\"];\r\n    METHODS.forEach((method) => {\r\n      this[method] = this[method].bind(this);\r\n    });\r\n  }\r\n\r\n  agregar() {\r\n    this.setState({\r\n      cantidad: this.state.cantidad + 1,\r\n    });\r\n  }\r\n\r\n  quitar() {\r\n    this.setState({\r\n      cantidad: this.state.cantidad - 1,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const hasItems = this.state.cantidad > 0;\r\n    const styles = {\r\n      border: \"1px solid white\",\r\n      marginBottom: \"1em\",\r\n      borderRadius: \"0.5em\",\r\n      padding: \"1em\",\r\n      background: hasItems\r\n        ? \"linear-gradient(135deg, #fad961 0%,#f76b1c 100%)\"\r\n        : \"#FFF\",\r\n      color: hasItems ? \"#FFF\" : \"#000\",\r\n      transition: \"all 400ms ease-out\",\r\n    };\r\n\r\n    return (\r\n      <div style={styles}>\r\n        <h3>{this.props.name}</h3>\r\n        <span>Cantidad: {this.state.cantidad} </span>\r\n        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n          <Button onClick={this.agregar}>+</Button>\r\n          <Button onClick={this.quitar}>-</Button>\r\n        </ButtonGroup>\r\n\r\n        <hr />\r\n        <p>S/ {this.props.price}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Button, ButtonGroup } from \"@material-ui/core\";\r\nexport default class Producto extends React.Component {\r\n  //inicializadores de propiedad\r\n\r\n  state = {\r\n    cantidad: 0,\r\n  };\r\n\r\n  agregar = () => this.setState({ cantidad: this.state.cantidad + 1 });\r\n  quitar = () => this.setState({ cantidad: this.state.cantidad - 1 });\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Producto</h2>\r\n        <h3>{this.props.name}</h3>\r\n        <div>Cantidad: {this.state.cantidad} </div>\r\n        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\r\n          <Button onClick={this.agregar}>+</Button>\r\n          <Button onClick={this.quitar}>-</Button>\r\n        </ButtonGroup>\r\n        <hr />\r\n        <p>S/ {this.props.price}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport TarjetaFruta from \"./TarjetaFruta\";\r\nimport Producto from \"./Producto\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport default class Home extends React.Component {\r\n  state = {\r\n    message: \"\",\r\n  };\r\n\r\n  handleGoHomeEvent = () => {\r\n    if (window.Android) window.Android.goHomeEvent(\"Click event go to home\");\r\n    this.setState({ message: \"Event click go to home ...\" });\r\n  };\r\n\r\n  handleCloseEvent = () => {\r\n    if (window.Android) window.Android.closePopupEvent();\r\n    this.setState({ message: \"Event close ...\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Button variant=\"outlined\" onClick={this.handleGoHomeEvent}>\r\n          Go Home\r\n        </Button>\r\n        <p>{this.state.message}</p>\r\n        <TarjetaFruta name=\"Manzana\" price={5.5} />\r\n        <Producto name=\"Pera\" price={45.5} />\r\n        <Button variant=\"outlined\" onClick={this.handleGoHomeEvent}>\r\n          X\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Home from \"./components/Home\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}